#!/usr/bin/env python3
"""
Post-process a directory of WARC files from a gemini crawl.

This script will loop through all of files in a WARC archive and consolidate
them into the target size of 1 GB compressed. This is necessary because the
crawler sometimes produces smaller files if it is paused / resumed midway
through a crawl.

This script will also replace the information in warcinfo record.
"""
import re
import argparse
import pathlib

from warcio.archiveiterator import ArchiveIterator
from warcio.warcwriter import WARCWriter


class ArchiveWriter:

    def __init__(self, warc_dir, out_dir):
        self.warc_dir = warc_dir
        self.out_dir = out_dir

        self.writer = None

        self.extension = ".warc.gz"
        self.serial = 0
        self.max_filesize = 1_000_000_000  # 1 GB
        self.prefix = "gemini_oct2020"
        self.crawlhost = "mozz"
        self.warcinfo = {
            "hostname": "mozz.us",
            "ip": "104.248.235.140",
            "http-header-user-agent": "archiver-mozz",
            "robots": "classic",
            "operator": "Michael Lazar (michael@mozz.us)",
            "software": "mozz-archiver/1.1.0 (https://github.com/michael-lazar/mozz-archiver)",
            "isPartOf": "gemini-crawl-oct2020",
            "description": "Geminispace crawl for historical archive",
            "format": "WARC file version 1.1",
            "conformsTo": "http://iipc.github.io/warc-specifications/specifications/warc-format/warc-1.1/"
        }

    def run(self):
        files = sorted(self.warc_dir.glob(f"*{self.extension}"))
        for file in files:
            with file.open('rb') as fp:
                for record in ArchiveIterator(fp):
                    if record.rec_type != "warcinfo":
                        writer.write_record(record)

    def build_writer(self, record):
        timestamp = record.rec_headers['WARC-Date'].split('.')[0]
        timestamp = re.sub('[T:.-]', '', timestamp)
        filename = '{prefix}-{timestamp}-{serial}-{crawlhost}{extension}'.format(
            prefix=self.prefix,
            timestamp=timestamp,
            serial=str(self.serial).zfill(6),
            crawlhost=self.crawlhost,
            extension=self.extension,
        )
        fp = (self.out_dir / filename).open('wb')
        print(f'Creating file {filename}')
        writer = WARCWriter(fp, warc_version="WARC/1.1")

        warcinfo = writer.create_warcinfo_record(filename, self.warcinfo)
        warcinfo.rec_headers.replace_header('WARC-Date', record.rec_headers['WARC-Date'])
        writer.write_record(warcinfo)
        return writer

    def write_record(self, record):
        if self.writer is None:
            self.writer = self.build_writer(record)

        self.writer.write_record(record)
        if self.writer.out.tell() > self.max_filesize:
            self.serial += 1
            self.writer = None


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Post process a multi-file WARC archive")
    parser.add_argument(
        'warc-dir',
        required=True,
        help="Directory containing the WARC files"
    )
    parser.add_argument(
        'out-dir',
        required=True,
        help="Directory that generated WARC files will be written to"
    )
    args = parser.parse_args()

    warc_dir = pathlib.Path(args.warc_dir).resolve()
    assert warc_dir.is_dir()

    out_dir = pathlib.Path(args.out_dir).resolve()
    out_dir.mkdir(exist_ok=True)
    assert out_dir.is_dir()

    writer = ArchiveWriter(warc_dir, out_dir)
    writer.run()
