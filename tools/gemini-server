#!/usr/bin/env python3
"""
A simple gemini server that will proxy all requests to a gemini archive.
"""
import time
import sqlite3
import argparse
import pathlib
from urllib.parse import urlparse

from warcio.archiveiterator import ArchiveIterator

from jetforce import GeminiServer, Status

parser = argparse.ArgumentParser()
parser.add_argument('--warc-dir', required=True, help="Directory containing the WARC files")
parser.add_argument('--index-db', required=True, help="WARC index file")
parser.add_argument('--host', default="127.0.0.1", help="Host to run the server on")
parser.add_argument('--port', default=1965, type=int, help="Port to run the server on")
args = parser.parse_args()

warc_dir = pathlib.Path(args.warc_dir).resolve()
assert warc_dir.is_dir()

conn = sqlite3.connect(args.index_db, isolation_level=None)
conn.row_factory = sqlite3.Row

c = conn.execute('SELECT COUNT(*) FROM requests')
url_count = c.fetchone()[0]
print(f'Loaded WARC index with {url_count} URLs')


def proxy_request(environ, send_status):
    url = environ['GEMINI_URL']

    # Attempt URL canonization
    try:
        url_parts = urlparse(url)
        if url_parts.port == 1965:
            url = url.replace(":1965", "", 1)
    except Exception:
        pass

    c = conn.execute('SELECT * FROM requests WHERE url=?', (url,))
    row = c.fetchone()
    if not row:
        send_status(Status.PROXY_ERROR, "ARCHIVE-ERROR: URL not found in archive")
        return

    if row['error_message']:
        send_status(Status.PROXY_ERROR, f"ARCHIVE-ERROR: {row['error_message']}")
        return

    # Don't use send_status() for mirrored responses to preserve the accuracy
    # of the response header format. Because we aren't using send_status(), we
    # need to manually generate the access log.
    client_addr = environ['REMOTE_ADDR']
    timestamp = time.strftime("%d/%b/%Y:%H:%M:%S %z", time.localtime())
    server.log_access(f'{client_addr} [{timestamp}] "{url}" <MIRRORED>')

    warc_file = warc_dir / row['warc_filename']
    with warc_file.open("rb") as fp:
        fp.seek(int(row["warc_offset"]))
        iterator = iter(ArchiveIterator(fp))
        record = next(iterator)
        content = record.content_stream()
        while data := content.read(2 ** 14):
            yield data


server = GeminiServer(proxy_request, host=args.host, port=args.port)
server.run()
